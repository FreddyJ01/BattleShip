@page "/ship-placement"
@using BlazorApp1.Models
@inject NavigationManager Navigation

<h3>Deploy Your Fleet</h3>

<div class="instructions">
    <p>üìã <strong>Instructions:</strong> Select a ship, then click on the grid to place it. Use the rotate button to change orientation. All ships must be placed before battle!</p>
</div>

<div class="ship-placement-container">
    <!-- Ship Placement Controls -->
    <div class="ship-placement-controls">
        <h4>Place Your Ships</h4>
        <div class="ship-selector">
            @foreach (var ship in shipManager.Ships)
            {
                <button class="ship-btn @(shipManager.SelectedShip == ship ? "selected" : "")"
                        @onclick="() => SelectShip(ship)">
                    @ship.Type (@ship.Length)
                    @if (ship.IsPlaced) { <span class="placed">‚úì</span> }
                </button>
            }
        </div>
        
        @if (shipManager.SelectedShip != null)
        {
            <div class="ship-controls">
                <p>Selected: @shipManager.SelectedShip.Type</p>
                <button @onclick="RotateSelectedShip">Rotate Ship</button>
                @if (shipManager.SelectedShip.IsPlaced)
                {
                    <button @onclick="RemoveSelectedShip">Remove Ship</button>
                }
            </div>
        }

        @if (AllShipsPlaced())
        {
            <div class="launch-controls">
                <button class="btn btn-primary launch-btn" @onclick="LaunchBattle">
                    ‚öîÔ∏è Launch Battle!
                </button>
            </div>
        }
        else
        {
            <div class="placement-status">
                <p>@GetPlacementStatus()</p>
            </div>
        }
    </div>

    <!-- Player's Board for Ship Placement -->
    <div class="board-section">
        <h3>Your Fleet Deployment</h3>
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        int currentRow = row;
                        int currentCol = col;
                        <td class="@GetPlayerCellClass(currentRow, currentCol)" 
                            @onclick="() => OnPlayerCellClick(currentRow, currentCol)"
                            @onmouseover="() => OnCellHover(currentRow, currentCol)"
                            @onmouseleave="() => OnCellLeave()">
                            @DisplayPlayerCellContent(currentRow, currentCol)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

<style>
    .instructions {
        background-color: #e8f4fd;
        border: 1px solid #b8daff;
        border-radius: 8px;
        padding: 15px;
        margin: 20px auto;
        max-width: 600px;
        text-align: center;
        color: #0c5460;
    }

    .ship-placement-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 30px;
        padding: 20px;
    }

    .ship-placement-controls {
        text-align: center;
        max-width: 800px;
        width: 100%;
    }

    .ship-selector {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin: 20px 0;
        flex-wrap: wrap;
    }

    .ship-btn {
        padding: 12px 18px;
        border: 2px solid #007bff;
        background-color: white;
        color: #007bff;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        position: relative;
    }

    .ship-btn.selected {
        background-color: #007bff;
        color: white;
        box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
    }

    .ship-btn:hover {
        background-color: #0056b3;
        color: white;
        transform: translateY(-2px);
    }

    .placed {
        color: #28a745;
        font-weight: bold;
        margin-left: 5px;
    }

    .ship-controls {
        margin: 20px 0;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .ship-controls button {
        margin: 0 8px;
        padding: 10px 20px;
        border: 1px solid #ccc;
        background-color: #ffffff;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .ship-controls button:hover {
        background-color: #e2e6ea;
        transform: translateY(-1px);
    }

    .launch-controls {
        margin-top: 30px;
    }

    .launch-btn {
        padding: 15px 30px;
        font-size: 18px;
        font-weight: bold;
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        transition: all 0.3s ease;
    }

    .launch-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }

    .placement-status {
        margin-top: 20px;
        padding: 15px;
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        color: #856404;
    }

    .board-section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    table {
        border-collapse: collapse;
        margin: 20px auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    td {
        width: 40px;
        height: 40px;
        border: 1px solid #333;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        font-weight: bold;
        font-size: 16px;
        user-select: none;
        transition: all 0.2s ease;
    }

    .empty {
        background-color: #87CEEB;
    }

    .empty:hover {
        background-color: #B0E0E6;
        transform: scale(1.05);
    }

    .ship {
        background-color: #4169E1;
        color: white;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .ship-preview {
        background-color: #007bff !important;
        opacity: 0.7;
        border: 2px solid #0056b3;
    }

    .invalid-placement {
        background-color: #dc3545 !important;
        opacity: 0.7;
        border: 2px solid #c82333;
    }

    h3 {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2rem;
        font-weight: 700;
    }

    h4 {
        color: #34495e;
        margin-bottom: 15px;
        font-size: 1.3rem;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        transform: translateY(-2px);
    }
</style>

@code {
    ShipManager shipManager = new ShipManager();
    private List<(int row, int col)> previewCells = new List<(int, int)>();
    private bool isValidPreview = false;

    void SelectShip(Ship ship)
    {
        shipManager.SelectedShip = ship;
        ClearPreview();
        StateHasChanged();
    }

    void OnPlayerCellClick(int row, int col)
    {
        if (shipManager.SelectedShip == null) return;

        // Try to place the selected ship
        bool placed = shipManager.PlaceShip(
            shipManager.SelectedShip, 
            row, 
            col, 
            shipManager.SelectedShip.Orientation);

        if (placed)
        {
            // Move to next unplaced ship
            shipManager.SelectedShip = shipManager.Ships
                .FirstOrDefault(s => !s.IsPlaced)!;
        }

        ClearPreview();
        StateHasChanged();
    }

    void OnCellHover(int row, int col)
    {
        if (shipManager.SelectedShip == null || shipManager.SelectedShip.IsPlaced) return;

        ClearPreview();
        
        // Calculate preview cells
        var ship = shipManager.SelectedShip;
        previewCells.Clear();
        
        for (int i = 0; i < ship.Length; i++)
        {
            int previewRow = row;
            int previewCol = col;
            
            if (ship.Orientation == ShipOrientation.Horizontal)
            {
                previewCol += i;
            }
            else
            {
                previewRow += i;
            }
            
            previewCells.Add((previewRow, previewCol));
        }

        // Check if placement is valid
        isValidPreview = shipManager.CanPlaceShip(ship, row, col, ship.Orientation);
        StateHasChanged();
    }

    void OnCellLeave()
    {
        ClearPreview();
        StateHasChanged();
    }

    void ClearPreview()
    {
        previewCells.Clear();
        isValidPreview = false;
    }

    void RotateSelectedShip()
    {
        if (shipManager.SelectedShip != null)
        {
            shipManager.RotateShip(shipManager.SelectedShip);
            ClearPreview();
            StateHasChanged();
        }
    }

    void RemoveSelectedShip()
    {
        if (shipManager.SelectedShip != null)
        {
            shipManager.RemoveShipFromGrid(shipManager.SelectedShip);
            StateHasChanged();
        }
    }

    bool AllShipsPlaced()
    {
        return shipManager.Ships.All(s => s.IsPlaced);
    }

    string GetPlacementStatus()
    {
        var unplacedShips = shipManager.Ships.Where(s => !s.IsPlaced).ToList();
        if (unplacedShips.Count == 0)
        {
            return "All ships deployed! Ready for battle.";
        }
        
        return $"Ships remaining: {string.Join(", ", unplacedShips.Select(s => s.Type))}";
    }

    void LaunchBattle()
    {
        if (AllShipsPlaced())
        {
            // Store the ship configuration in a way that can be passed to the battle page
            // For now, we'll navigate to the battle page
            Navigation.NavigateTo("/battleship");
        }
    }

    string GetPlayerCellClass(int row, int col)
    {
        // Check if this cell is in preview
        if (previewCells.Contains((row, col)))
        {
            return isValidPreview ? "ship-preview" : "invalid-placement";
        }

        if (shipManager.Grid[row, col] == 1)
            return "ship";
        return "empty";
    }

    string DisplayPlayerCellContent(int row, int col)
    {
        var ship = shipManager.GetShipAtPosition(row, col);
        if (ship != null)
        {
            return ship.Type[0].ToString(); // First letter of ship type
        }
        return "";
    }
}
