@page "/ship-placement"
@inject NavigationManager Navigation
@inject BlazorApp1.Services.GameStateService GameState

<div class="deployment-container">
    <!-- Animated background particles -->
    <div class="particles-bg">
        @for (int i = 0; i < 30; i++)
        {
            <div class="particle" style="--delay: @(i * 0.15)s; --duration: @(Random.Shared.Next(4, 9))s;"></div>
        }
    </div>

    <div class="deployment-content" @onclick="DeselectShip">
        <h3 @onclick="NavigateToHome" @onclick:stopPropagation="true" style="cursor: pointer;">Deploy Your Fleet</h3>

        <div class="ship-placement-container">
            <!-- Ship Placement Controls -->
            <div class="ship-placement-controls">
        <h4>Place Your Ships</h4>
        <div class="ship-selector">
            @foreach (var ship in shipManager.Ships)
            {
                <button class="ship-btn @(shipManager.SelectedShip == ship ? "selected" : "")"
                        @onclick="() => SelectShip(ship)" @onclick:stopPropagation="true">
                    @ship.Type (@ship.Length)
                    @if (ship.IsPlaced) { <span class="placed">âœ“</span> }
                </button>
            }
        </div>

        @if (AllShipsPlaced())
        {
            <div class="launch-controls">
                <button class="btn btn-primary launch-btn" @onclick="LaunchBattle" @onclick:stopPropagation="true" draggable="false">
                    ðŸ”± Launch Battle!
                </button>
            </div>
        }
        else
        {
            <div class="placement-status">
                <p>@GetPlacementStatus()</p>
            </div>
        }
    </div>

    <!-- Player's Board for Ship Placement -->
    <div class="board-section">
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        int currentRow = row;
                        int currentCol = col;
                        <td class="@GetPlayerCellClass(currentRow, currentCol)" 
                            @onclick="() => OnPlayerCellClick(currentRow, currentCol)" @onclick:stopPropagation="true"
                            @onmouseover="() => OnCellHover(currentRow, currentCol)"
                            @onmouseleave="() => OnCellLeave()">
                            @DisplayPlayerCellContent(currentRow, currentCol)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>

    <!-- Selected Ship Controls (Right Side) -->
    <div class="selected-ship-section">
        @if (shipManager.SelectedShip != null)
        {
            <div class="ship-controls">
                <p>Selected: @shipManager.SelectedShip.Type</p>
                @if (shipManager.SelectedShip.IsPlaced)
                {
                    <button @onclick="RemoveSelectedShip" @onclick:stopPropagation="true">Remove Ship</button>
                }
                else
                {
                    <button @onclick="RotateSelectedShip" @onclick:stopPropagation="true">
                        @(shipManager.SelectedShip.Orientation == ShipOrientation.Horizontal ? "Horizontal" : "Vertical")
                    </button>
                }
            </div>
        }
        else
        {
            <div class="ship-controls">
                <p>No ship selected</p>
                <p style="font-size: 0.9rem; opacity: 0.7;">Select a ship to place or click on a placed ship to move it</p>
            </div>
        }

        <!-- Random Deployment Button -->
        <div class="random-deployment">
            <button class="btn btn-secondary random-btn" @onclick="RandomDeployment" @onclick:stopPropagation="true">
                ðŸŽ² Random Deployment
            </button>
            <p style="font-size: 0.8rem; opacity: 0.7; color: white; margin-top: 10px;">
                Automatically place all ships randomly
            </p>
        </div>
    </div>
        </div>
    </div>
</div>

<style>
    /* Deployment Page Background */
    .deployment-container {
        min-height: 100vh;
        position: relative;
        overflow: hidden;
        background: linear-gradient(135deg, #0f3460 0%, #16537e 25%, #2e8b9e 50%, #3ea8a8 75%, #4fc3aa 100%);
        font-family: 'Exo 2', sans-serif;
    }

    /* Animated Background Particles */
    .particles-bg {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 1;
    }

    .particle {
        position: absolute;
        width: 3px;
        height: 3px;
        background: rgba(255, 255, 255, 0.4);
        border-radius: 50%;
        animation: float var(--duration) infinite ease-in-out;
        animation-delay: var(--delay);
        left: calc(var(--delay) * 25);
        top: calc(var(--delay) * 20);
    }

    .deployment-content {
        position: relative;
        z-index: 2;
        padding: 2rem;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        padding-top: 4rem;
    }

    .instructions {
        background-color: #e8f4fd;
        border: 1px solid #b8daff;
        border-radius: 8px;
        padding: 15px;
        margin: 20px auto;
        max-width: 600px;
        text-align: center;
        color: #0c5460;
    }

    .ship-placement-container {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        justify-content: center;
        gap: 30px;
        padding: 20px;
        max-width: 1400px;
        width: 100%;
        margin: 0 auto;
        min-height: 500px;
    }

    /* Mobile Responsive Design */
    @@media (max-width: 768px) {
        .ship-placement-container {
            flex-direction: column;
            gap: 20px;
            padding: 10px;
            min-height: auto;
        }

        .deployment-content {
            padding: 1rem;
            padding-top: 2rem;
        }

        h3 {
            font-size: 1.8rem;
            margin-bottom: 20px;
        }

        .ship-placement-controls, .selected-ship-section {
            max-width: 100%;
            min-width: auto;
            width: 100%;
            min-height: auto;
        }

        .board-section {
            order: -1; /* Move board to top on mobile */
        }

        table {
            width: 320px;
            height: 320px;
            margin: 10px auto;
        }

        td {
            width: 32px;
            height: 32px;
            font-size: 14px;
            /* Improve touch targets */
            min-height: 44px;
            min-width: 44px;
        }

        .ship-btn {
            padding: 12px 15px;
            font-size: 14px;
            /* Ensure touch-friendly buttons */
            min-height: 44px;
        }

        .ship-controls {
            margin: 15px 0;
            padding: 15px;
        }

        .ship-controls button {
            min-height: 44px;
            padding: 12px 20px;
        }

        .random-deployment {
            margin-top: 20px;
            padding: 15px;
        }

        .random-btn {
            min-height: 44px;
        }

        .launch-btn {
            padding: 15px 25px;
            font-size: 16px;
            min-height: 50px;
        }
    }

    @@media (max-width: 480px) {
        .deployment-content {
            padding: 0.5rem;
            padding-top: 1rem;
        }

        h3 {
            font-size: 1.5rem;
        }

        table {
            width: 280px;
            height: 280px;
        }

        td {
            width: 28px;
            height: 28px;
            font-size: 12px;
        }

        .ship-btn {
            padding: 8px 12px;
            font-size: 13px;
        }

        .ship-controls p {
            font-size: 1rem;
        }

        .random-btn {
            font-size: 14px;
            padding: 10px 15px;
        }
    }

    .ship-placement-controls {
        text-align: center;
        max-width: 350px;
        min-width: 300px;
        width: 100%;
        flex-shrink: 0;
        min-height: 400px;
    }

    .selected-ship-section {
        text-align: center;
        max-width: 350px;
        min-width: 300px;
        width: 100%;
        flex-shrink: 0;
        min-height: 400px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    .ship-selector {
        display: flex;
        flex-direction: column;
        gap: 10px;
        justify-content: center;
        margin: 20px 0;
    }

    .ship-btn {
        padding: 12px 18px;
        border: 2px solid rgba(255, 107, 107, 0.3);
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        position: relative;
        backdrop-filter: blur(10px);
    }

    .ship-btn.selected {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        color: white;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
        border-color: transparent;
    }

    .ship-btn:hover {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255, 107, 107, 0.3);
        border-color: transparent;
    }

    .placed {
        color: #28a745;
        font-weight: bold;
        margin-left: 5px;
    }

    .ship-controls {
        margin: 20px 0;
        padding: 20px;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    }

    .ship-controls p {
        margin: 0 0 15px 0;
        color: white;
        font-size: 1.1rem;
        font-weight: 600;
        text-align: center;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .ship-controls button {
        margin: 5px 8px;
        padding: 10px 20px;
        border: 2px solid rgba(255, 107, 107, 0.3);
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        font-weight: 600;
        display: inline-block;
    }

    .ship-controls button:hover {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        border-color: transparent;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

    .launch-controls {
        margin-top: 30px;
    }

    .launch-btn {
        padding: 15px 30px;
        font-size: 18px;
        font-weight: bold;
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        transition: all 0.3s ease;
        user-select: none;
    }

    .launch-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }

    .placement-status {
        margin-top: 20px;
        padding: 15px;
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        color: #856404;
    }

    .board-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex-shrink: 0;
    }

    table {
        border-collapse: collapse;
        margin: 20px auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
        width: 400px;
        height: 400px;
        border: 2px solid #333;
    }

    td {
        width: 40px;
        height: 40px;
        border: 1px solid #333;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        font-weight: bold;
        font-size: 16px;
        user-select: none;
        transition: all 0.2s ease;
        border-right: 1px solid #333;
        border-bottom: 1px solid #333;
    }

    /* Remove borders on outer edges to work with table border */
    td:first-child {
        border-left: none;
    }

    td:last-child {
        border-right: none;
    }

    tr:first-child td {
        border-top: none;
    }

    tr:last-child td {
        border-bottom: none;
    }

    .empty {
        background-color: #87CEEB;
    }

    .empty:hover {
        background-color: #B0E0E6;
        transform: scale(1.05);
    }

    .ship {
        background-color: #4169E1;
        color: white;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .ship-preview {
        background-color: #007bff !important;
        opacity: 0.7;
        border: 2px solid #0056b3;
    }

    .invalid-placement {
        background-color: #dc3545 !important;
        opacity: 0.7;
        border: 2px solid #c82333;
    }

    h3 {
        color: #ffffff;
        text-align: center;
        margin-bottom: 30px;
        font-size: 2.5rem;
        font-weight: 700;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        font-family: 'Orbitron', sans-serif;
    }

    h4 {
        color: #ffffff;
        margin-bottom: 15px;
        font-size: 1.3rem;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        color: white;
        box-shadow: 0 8px 30px rgba(255, 107, 107, 0.3);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        transform: translateY(-3px);
        box-shadow: 0 12px 40px rgba(255, 107, 107, 0.4);
    }

    .btn-secondary {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: white;
        box-shadow: 0 8px 30px rgba(108, 117, 125, 0.3);
    }

    .btn-secondary:hover {
        background: linear-gradient(135deg, #5a6268, #343a40);
        transform: translateY(-3px);
        box-shadow: 0 12px 40px rgba(108, 117, 125, 0.4);
    }

    .random-deployment {
        margin-top: 30px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        text-align: center;
    }

    .random-btn {
        width: 100%;
        padding: 12px 20px;
        font-size: 16px;
        font-weight: 600;
    }
</style>

@code {
    ShipManager shipManager = new ShipManager();
    private List<(int row, int col)> previewCells = new List<(int, int)>();
    private bool isValidPreview = false;

    void SelectShip(Ship ship)
    {
        // If the ship is already selected
        if (shipManager.SelectedShip == ship)
        {
            // If it's placed, keep it selected (so user can click on grid to remove it)
            if (ship.IsPlaced)
            {
                // Do nothing, keep it selected
                return;
            }
            // If it's not placed, rotate it
            else
            {
                shipManager.RotateShip(ship);
                ClearPreview();
                StateHasChanged();
                return;
            }
        }

        shipManager.SelectedShip = ship;
        ClearPreview();
        StateHasChanged();
    }

    void OnPlayerCellClick(int row, int col)
    {
        // Check if there's already a ship at this position
        var existingShip = shipManager.GetShipAtPosition(row, col);
        if (existingShip != null)
        {
            // Always remove the ship from the grid when clicked
            shipManager.RemoveShipFromGrid(existingShip);
            // Select the removed ship for re-placement
            shipManager.SelectedShip = existingShip;
            ClearPreview();
            StateHasChanged();
            return;
        }

        if (shipManager.SelectedShip == null) return;

        // Try to place the selected ship
        bool placed = shipManager.PlaceShip(
            shipManager.SelectedShip, 
            row, 
            col, 
            shipManager.SelectedShip.Orientation);

        if (placed)
        {
            // Move to next unplaced ship
            shipManager.SelectedShip = shipManager.Ships
                .FirstOrDefault(s => !s.IsPlaced)!;
        }

        ClearPreview();
        StateHasChanged();
    }

    void OnCellHover(int row, int col)
    {
        if (shipManager.SelectedShip == null || shipManager.SelectedShip.IsPlaced) return;

        ClearPreview();
        
        // Calculate preview cells
        var ship = shipManager.SelectedShip;
        previewCells.Clear();
        
        for (int i = 0; i < ship.Length; i++)
        {
            int previewRow = row;
            int previewCol = col;
            
            if (ship.Orientation == ShipOrientation.Horizontal)
            {
                previewCol += i;
            }
            else
            {
                previewRow += i;
            }
            
            previewCells.Add((previewRow, previewCol));
        }

        // Check if placement is valid
        isValidPreview = shipManager.CanPlaceShip(ship, row, col, ship.Orientation);
        StateHasChanged();
    }

    void OnCellLeave()
    {
        ClearPreview();
        StateHasChanged();
    }

    void ClearPreview()
    {
        previewCells.Clear();
        isValidPreview = false;
    }

    void RotateSelectedShip()
    {
        if (shipManager.SelectedShip != null)
        {
            shipManager.RotateShip(shipManager.SelectedShip);
            ClearPreview();
            StateHasChanged();
        }
    }

    void RemoveSelectedShip()
    {
        if (shipManager.SelectedShip != null)
        {
            shipManager.RemoveShipFromGrid(shipManager.SelectedShip);
            StateHasChanged();
        }
    }

    bool AllShipsPlaced()
    {
        return shipManager.Ships.All(s => s.IsPlaced);
    }

    string GetPlacementStatus()
    {
        var unplacedShips = shipManager.Ships.Where(s => !s.IsPlaced).ToList();
        if (unplacedShips.Count == 0)
        {
            return "All ships deployed! Ready for battle.";
        }
        
        return $"Ships remaining: {string.Join(", ", unplacedShips.Select(s => s.Type))}";
    }

    void LaunchBattle()
    {
        if (AllShipsPlaced())
        {
            // Store the ship configuration in the game state service
            GameState.SetPlayerShips(shipManager);
            // Navigate to the battle page
            Navigation.NavigateTo("/battleship");
        }
    }

    string GetPlayerCellClass(int row, int col)
    {
        // Check if this cell is in preview
        if (previewCells.Contains((row, col)))
        {
            return isValidPreview ? "ship-preview" : "invalid-placement";
        }

        if (shipManager.Grid[row, col] == 1)
            return "ship";
        return "empty";
    }

    string DisplayPlayerCellContent(int row, int col)
    {
        var ship = shipManager.GetShipAtPosition(row, col);
        if (ship != null)
        {
            return ship.Type[0].ToString(); // First letter of ship type
        }
        return "";
    }

    void DeselectShip()
    {
        shipManager.SelectedShip = null;
        ClearPreview();
        StateHasChanged();
    }

    void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    void RandomDeployment()
    {
        // Clear all currently placed ships
        foreach (var ship in shipManager.Ships)
        {
            if (ship.IsPlaced)
            {
                shipManager.RemoveShipFromGrid(ship);
            }
        }

        // Randomly place all ships
        var random = Random.Shared;
        var shipsToPlace = shipManager.Ships.ToList();

        foreach (var ship in shipsToPlace)
        {
            bool placed = false;
            int attempts = 0;
            const int maxAttempts = 100; // Prevent infinite loops

            while (!placed && attempts < maxAttempts)
            {
                // Random position
                int row = random.Next(0, 10);
                int col = random.Next(0, 10);
                
                // Random orientation
                ship.Orientation = random.Next(2) == 0 ? ShipOrientation.Horizontal : ShipOrientation.Vertical;

                // Try to place the ship
                if (shipManager.CanPlaceShip(ship, row, col, ship.Orientation))
                {
                    placed = shipManager.PlaceShip(ship, row, col, ship.Orientation);
                }

                attempts++;
            }
        }

        // Clear selection after random deployment
        shipManager.SelectedShip = null;
        ClearPreview();
        StateHasChanged();
    }
}
