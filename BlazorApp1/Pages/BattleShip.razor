@page "/battleship"
@using BlazorApp1.Models

<h3>Battle Phase</h3>

<div class="battle-status">
    <p class="status-text">ðŸŽ¯ Select enemy grid positions to attack!</p>
</div>

<div class="boards-container">
    <div class="board-section">
        <h3>Your Fleet</h3>
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        int currentRow = row;
                        int currentCol = col;
                        <td class="@GetPlayerCellClass(currentRow, currentCol)">
                            @DisplayPlayerCellContent(currentRow, currentCol)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
    
    <div class="board-section">
        <h3>Enemy Waters</h3>
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        int currentRow = row;
                        int currentCol = col;
                        <td class="@GetOpponentCellClass(currentRow, currentCol)" 
                            @onclick="() => OnOpponentCellClick(currentRow, currentCol)">
                            @DisplayCellContent(opponentGrid, currentRow, currentCol)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

@if (CheckVictory())
{
    <div class="victory-message">
        <h2>ðŸŽ‰ Victory! You've sunk all enemy ships! ðŸŽ‰</h2>
        <button class="btn btn-primary" @onclick="RestartGame">Play Again</button>
    </div>
}

<style>
    .battle-status {
        text-align: center;
        margin: 20px 0;
        padding: 15px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .status-text {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
    }

    .boards-container {
        display: flex;
        justify-content: center;
        gap: 40px;
        margin-top: 20px;
        flex-wrap: wrap;
    }

    .board-section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .board-section h3 {
        color: #2c3e50;
        margin-bottom: 15px;
        font-size: 1.5rem;
        font-weight: 700;
    }

    table {
        border-collapse: collapse;
        margin: 0 auto;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border-radius: 8px;
        overflow: hidden;
    }

    td {
        width: 40px;
        height: 40px;
        border: 1px solid #333;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        font-weight: bold;
        font-size: 18px;
        user-select: none;
        transition: all 0.2s ease;
    }

    .empty {
        background-color: #87CEEB;
    }

    .empty:hover {
        background-color: #B0E0E6;
        transform: scale(1.05);
    }

    .ship {
        background-color: #4169E1;
        color: white;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .hit {
        background-color: #DC143C;
        color: white;
        position: relative;
    }

    .hit::after {
        content: "ðŸ’¥";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 20px;
    }

    .miss {
        background-color: #696969;
        color: white;
    }

    .hit, .miss {
        cursor: not-allowed;
    }

    .victory-message {
        text-align: center;
        margin-top: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        border-radius: 15px;
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
    }

    .victory-message h2 {
        margin: 0 0 15px 0;
        font-size: 2rem;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        transform: translateY(-2px);
    }
</style>

@code {
    // 0 = empty, 1 = ship, 2 = hit, 3 = miss
    int[,] opponentGrid = new int[10, 10];
    ShipManager shipManager = new ShipManager();
    private int totalOpponentShips = 0;
    private int hitOpponentShips = 0;

    protected override void OnInitialized()
    {
        // Place player ships automatically for now (in a real implementation, this would come from ship placement page)
        PlacePlayerShipsAutomatically();
        PlaceOpponentShips();
    }

    void PlacePlayerShipsAutomatically()
    {
        // Auto-place player ships for demonstration
        shipManager.PlaceShip(shipManager.Ships[0], 0, 0, ShipOrientation.Horizontal); // Carrier
        shipManager.PlaceShip(shipManager.Ships[1], 2, 1, ShipOrientation.Vertical);   // Destroyer
        shipManager.PlaceShip(shipManager.Ships[2], 5, 5, ShipOrientation.Horizontal); // Corvette
        shipManager.PlaceShip(shipManager.Ships[3], 8, 8, ShipOrientation.Vertical);   // Submarine
    }

    void PlaceOpponentShips()
    {
        // Place opponent ships randomly (simplified)
        var shipPositions = new List<(int row, int col)>();
        
        // Carrier (3 cells)
        for (int col = 3; col <= 5; col++)
        {
            opponentGrid[2, col] = 1;
            shipPositions.Add((2, col));
        }
        
        // Destroyer (3 cells)
        for (int row = 1; row <= 3; row++)
        {
            opponentGrid[row, 7] = 1;
            shipPositions.Add((row, 7));
        }
        
        // Corvette (3 cells)
        for (int col = 1; col <= 3; col++)
        {
            opponentGrid[5, col] = 1;
            shipPositions.Add((5, col));
        }
        
        // Submarine (2 cells)
        opponentGrid[8, 6] = 1;
        opponentGrid[8, 7] = 1;
        shipPositions.Add((8, 6));
        shipPositions.Add((8, 7));
        
        // Single ship (1 cell)
        opponentGrid[0, 9] = 1;
        shipPositions.Add((0, 9));

        totalOpponentShips = shipPositions.Count;
    }

    void OnOpponentCellClick(int row, int col)
    {
        if (row < 0 || row >= 10 || col < 0 || col >= 10)
            return;
        if (opponentGrid[row, col] == 2 || opponentGrid[row, col] == 3)
            return;

        if (opponentGrid[row, col] == 1)
        {
            opponentGrid[row, col] = 2; // hit
            hitOpponentShips++;
        }
        else
        {
            opponentGrid[row, col] = 3; // miss
        }

        StateHasChanged();
    }

    bool CheckVictory()
    {
        return hitOpponentShips >= totalOpponentShips;
    }

    void RestartGame()
    {
        // Reset grids
        opponentGrid = new int[10, 10];
        shipManager = new ShipManager();
        hitOpponentShips = 0;
        totalOpponentShips = 0;
        
        // Reinitialize the game
        OnInitialized();
        StateHasChanged();
    }

    string GetPlayerCellClass(int row, int col)
    {
        if (shipManager.Grid[row, col] == 1)
            return "ship";
        return "empty";
    }

    string GetOpponentCellClass(int row, int col)
    {
        return opponentGrid[row, col] switch
        {
            2 => "hit",
            3 => "miss",
            _ => "empty"
        };
    }

    string DisplayPlayerCellContent(int row, int col)
    {
        var ship = shipManager.GetShipAtPosition(row, col);
        if (ship != null)
        {
            return ship.Type[0].ToString(); // First letter of ship type
        }
        return "";
    }

    string DisplayCellContent(int[,] grid, int row, int col)
    {
        return grid[row, col] switch
        {
            2 => "X", // hit
            3 => "O", // miss
            _ => ""
        };
    }
}
