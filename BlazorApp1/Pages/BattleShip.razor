@page "/battleship"

<h3>Battleship Game</h3>

<style>
    .boards-container {
        display: flex;
        justify-content: center;
        gap: 40px;
        margin-top: 20px;
    }
    .board-section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    table {
        border-collapse: collapse;
        margin: 0 auto;
    }
    td {
        width: 40px;
        height: 40px;
        border: 1px solid #333;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        font-weight: bold;
        font-size: 18px;
        user-select: none;
    }
    .empty {
        background-color: #87CEEB;
    }
    .empty:hover {
        background-color: #B0E0E6;
    }
    .ship {
        background-color: #4169E1;
        color: white;
    }
    .hit {
        background-color: #DC143C; /* red */
        color: white;
    }
    .miss {
        background-color: #696969; /* grey */
        color: white;
    }
    .hit, .miss {
        cursor: not-allowed;
    }
</style>

<div class="boards-container">
    <div class="board-section">
        <h3>Your Board</h3>
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        <td class="@GetPlayerCellClass(row, col)">
                            @GetCellContent(playerGrid, row, col)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
    <div class="board-section">
        <h3>Opponent's Board</h3>
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        <td class="@GetOpponentCellClass(row, col)" @onclick="() => OnOpponentCellClick(row, col)">
                            @GetCellContent(opponentGrid, row, col)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

@code {
    // 0 = empty, 1 = ship, 2 = hit, 3 = miss
    int[,] playerGrid = new int[10, 10];
    int[,] opponentGrid = new int[10, 10];

    protected override void OnInitialized()
    {
        PlaceShips(playerGrid);
        PlaceShips(opponentGrid);
    }

    // Places ships for demo purposes
    void PlaceShips(int[,] grid)
    {
        for (int col = 3; col <= 5; col++)
            grid[2, col] = 1;
        for (int row = 1; row <= 3; row++)
            grid[row, 7] = 1;
        for (int col = 1; col <= 3; col++)
            grid[5, col] = 1;
        grid[8, 6] = 1;
        grid[8, 7] = 1;
        grid[0, 9] = 1;
    }

    // Handles clicks on opponent's board
    void OnOpponentCellClick(int row, int col)
    {
        // Only allow clicking if cell hasn't been guessed yet
        if (row < 0 || row >= 10 || col < 0 || col >= 10)
            return;
        if (opponentGrid[row, col] == 2 || opponentGrid[row, col] == 3)
            return;
        if (opponentGrid[row, col] == 1)
            opponentGrid[row, col] = 2; // hit
        else if (opponentGrid[row, col] == 0)
            opponentGrid[row, col] = 3; // miss
        StateHasChanged();
    }

    // Returns CSS class for player's board (shows ships)
    string GetPlayerCellClass(int row, int col)
    {
        return playerGrid[row, col] switch
        {
            1 => "ship",
            2 => "hit",
            3 => "miss",
            _ => "empty"
        };
    }

    // Returns CSS class for opponent's board (hides ships)
    string GetOpponentCellClass(int row, int col)
    {
        return opponentGrid[row, col] switch
        {
            2 => "hit",
            3 => "miss",
            _ => "empty"
        };
    }

    // Returns symbol for cell state
    // "X" for hit, "O" for miss, blank otherwise
    string GetCellContent(int[,] grid, int row, int col)
    {
        return grid[row, col] switch
        {
            2 => "X",
            3 => "O",
            _ => ""
        };
    }
}