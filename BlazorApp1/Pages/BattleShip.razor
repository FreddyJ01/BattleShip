@page "/battleship"

<h3>Battleship Game</h3>

<style>
    table {
        border-collapse: collapse;
        margin: 20px auto;
    }
    
    td {
        width: 40px;
        height: 40px;
        border: 1px solid #333;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        font-weight: bold;
        font-size: 18px;
        user-select: none;
    }
    
    .empty {
        background-color: #87CEEB;
    }
    
    .empty:hover {
        background-color: #B0E0E6;
    }
    
    .ship {
        background-color: #4169E1; /* Blue for ships - for debugging */
        color: white;
    }
    
    .hit {
        background-color: #DC143C;
        color: white;
    }
    
    .miss {
        background-color: #696969;
        color: white;
    }
    
    .hit, .miss {
        cursor: not-allowed;
    }
</style>

<table>
    @for (int row = 0; row < 10; row++)
    {
        <tr>
            @for (int col = 0; col < 10; col++) 
            {
                int currentRow = row;
                int currentCol = col;
                <td class="@GetCellClass(currentRow, currentCol)" @onclick="() => OnCellClick(currentRow, currentCol)">
                    @GetCellContent(currentRow, currentCol)
                </td>
            }
        </tr>
    }
</table>

@code {
    //0 = empty, 1 = ship, 2 = hit, 3 = miss
    int[,] grid = new int[10, 10];

    protected override void OnInitialized()
    {
        PlaceShips();
    }

    void PlaceShips()
    {
        // Place some ships on the grid for testing
        // Horizontal ship at row 2, cols 3-5
        for (int col = 3; col <= 5; col++)
            grid[2, col] = 1;
        
        // Vertical ship at col 7, rows 1-3
        for (int row = 1; row <= 3; row++)
            grid[row, 7] = 1;
        
        // Horizontal ship at row 5, cols 1-3
        for (int col = 1; col <= 3; col++)
            grid[5, col] = 1;
        
        // Small ship at row 8, cols 6-7
        grid[8, 6] = 1;
        grid[8, 7] = 1;
        
        // Single ship at row 0, col 9
        grid[0, 9] = 1;
    }

    void OnCellClick(int row, int col) 
    {
        // Check bounds
        if (row < 0 || row >= 10 || col < 0 || col >= 10)
            return;
            
        // Prevent clicking on already clicked cells
        if (grid[row, col] == 2 || grid[row, col] == 3)
            return;
            
        if (grid[row, col] == 1)
            grid[row, col] = 2; // hit
        else if (grid[row, col] == 0)
            grid[row, col] = 3; // miss
            
        StateHasChanged(); // Force UI update
    }

    string GetCellClass(int row, int col) 
    {
        return grid[row, col] switch 
        {
            1 => "ship", // for debugging - you can remove this later
            2 => "hit",
            3 => "miss",
            _ => "empty"
        };
    }

    string GetCellContent(int row, int col) 
    {
        return grid[row, col] switch 
        {
            2 => "X", // hit
            3 => "O", // miss
            _ => ""
        };
    }
}