@page "/battleship"
@using BlazorApp1.Models

<h3>Battleship Game</h3>

<!-- Ship Placement Controls -->
<div class="ship-placement-controls">
    <h4>Place Your Ships</h4>
    <div class="ship-selector">
        @foreach (var ship in shipManager.Ships)
        {
            <button class="ship-btn @(shipManager.SelectedShip == ship ? "selected" : "")"
                    @onclick="() => SelectShip(ship)">
                @ship.Type (@ship.Length)
                @if (ship.IsPlaced) { <span class="placed">âœ“</span> }
            </button>
        }
    </div>
    
    @if (shipManager.SelectedShip != null)
    {
        <div class="ship-controls">
            <p>Selected: @shipManager.SelectedShip.Type</p>
            <button @onclick="RotateSelectedShip">Rotate Ship</button>
            @if (shipManager.SelectedShip.IsPlaced)
            {
                <button @onclick="RemoveSelectedShip">Remove Ship</button>
            }
        </div>
    }
</div>

<div class="boards-container">
    <div class="board-section">
        <h3>Your Board</h3>
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        int currentRow = row;
                        int currentCol = col;
                        <td class="@GetPlayerCellClass(currentRow, currentCol)" 
                            @onclick="() => OnPlayerCellClick(currentRow, currentCol)">
                            @DisplayPlayerCellContent(currentRow, currentCol)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
    
    <div class="board-section">
        <h3>Opponent's Board</h3>
        <table>
            @for (int row = 0; row < 10; row++)
            {
                <tr>
                    @for (int col = 0; col < 10; col++)
                    {
                        int currentRow = row;
                        int currentCol = col;
                        <td class="@GetOpponentCellClass(currentRow, currentCol)" 
                            @onclick="() => OnOpponentCellClick(currentRow, currentCol)">
                            @DisplayCellContent(opponentGrid, currentRow, currentCol)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

<style>
    .ship-placement-controls {
        margin-bottom: 20px;
        text-align: center;
    }

    .ship-selector {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin: 10px 0;
        flex-wrap: wrap;
    }

    .ship-btn {
        padding: 10px 15px;
        border: 2px solid #007bff;
        background-color: white;
        color: #007bff;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .ship-btn.selected {
        background-color: #007bff;
        color: white;
    }

    .ship-btn:hover {
        background-color: #0056b3;
        color: white;
    }

    .placed {
        color: #28a745;
        font-weight: bold;
    }

    .ship-controls {
        margin: 15px 0;
    }

    .ship-controls button {
        margin: 0 5px;
        padding: 8px 16px;
        border: 1px solid #ccc;
        background-color: #f8f9fa;
        border-radius: 4px;
        cursor: pointer;
    }

    .ship-controls button:hover {
        background-color: #e2e6ea;
    }

    /* Add preview styling for ship placement */
    .ship-preview {
        background-color: #007bff !important;
        opacity: 0.7;
    }

    .invalid-placement {
        background-color: #dc3545 !important;
        opacity: 0.7;
    }

    .boards-container {
        display: flex;
        justify-content: center;
        gap: 40px;
        margin-top: 20px;
    }
    .board-section {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    table {
        border-collapse: collapse;
        margin: 0 auto;
    }
    td {
        width: 40px;
        height: 40px;
        border: 1px solid #333;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        font-weight: bold;
        font-size: 18px;
        user-select: none;
    }
    .empty {
        background-color: #87CEEB;
    }
    .empty:hover {
        background-color: #B0E0E6;
    }
    .ship {
        background-color: #4169E1;
        color: white;
    }
    .hit {
        background-color: #DC143C; /* red */
        color: white;
    }
    .miss {
        background-color: #696969; /* grey */
        color: white;
    }
    .hit, .miss {
        cursor: not-allowed;
    }
</style>

@code {
    // 0 = empty, 1 = ship, 2 = hit, 3 = miss
    int[,] opponentGrid = new int[10, 10];
    ShipManager shipManager = new ShipManager();

    protected override void OnInitialized()
    {
        PlaceOpponentShips();
    }

    void PlaceOpponentShips()
    {
        // Place opponent ships randomly (simplified)
        for (int col = 3; col <= 5; col++)
            opponentGrid[2, col] = 1;
        for (int row = 1; row <= 3; row++)
            opponentGrid[row, 7] = 1;
        for (int col = 1; col <= 3; col++)
            opponentGrid[5, col] = 1;
        opponentGrid[8, 6] = 1;
        opponentGrid[8, 7] = 1;
        opponentGrid[0, 9] = 1;
    }

    void SelectShip(Ship ship)
    {
        shipManager.SelectedShip = ship;
        StateHasChanged();
    }

    void OnPlayerCellClick(int row, int col)
    {
        if (shipManager.SelectedShip == null) return;

        // Try to place the selected ship
        bool placed = shipManager.PlaceShip(
            shipManager.SelectedShip, 
            row, 
            col, 
            shipManager.SelectedShip.Orientation);

        if (placed)
        {
            // Move to next unplaced ship
            shipManager.SelectedShip = shipManager.Ships
                .FirstOrDefault(s => !s.IsPlaced);
        }

        StateHasChanged();
    }

    void RotateSelectedShip()
    {
        if (shipManager.SelectedShip != null)
        {
            shipManager.RotateShip(shipManager.SelectedShip);
            StateHasChanged();
        }
    }

    void RemoveSelectedShip()
    {
        if (shipManager.SelectedShip != null)
        {
            shipManager.RemoveShipFromGrid(shipManager.SelectedShip);
            StateHasChanged();
        }
    }

    void OnOpponentCellClick(int row, int col)
    {
        // Only allow attacking if all ships are placed
        if (shipManager.Ships.Any(s => !s.IsPlaced))
        {
            return; // All ships must be placed first
        }

        if (row < 0 || row >= 10 || col < 0 || col >= 10)
            return;
        if (opponentGrid[row, col] == 2 || opponentGrid[row, col] == 3)
            return;

        if (opponentGrid[row, col] == 1)
            opponentGrid[row, col] = 2; // hit
        else
            opponentGrid[row, col] = 3; // miss

        StateHasChanged();
    }

    string GetPlayerCellClass(int row, int col)
    {
        if (shipManager.Grid[row, col] == 1)
            return "ship";
        return "empty";
    }

    string GetOpponentCellClass(int row, int col)
    {
        return opponentGrid[row, col] switch
        {
            2 => "hit",
            3 => "miss",
            _ => "empty"
        };
    }

    string DisplayPlayerCellContent(int row, int col)
    {
        var ship = shipManager.GetShipAtPosition(row, col);
        if (ship != null)
        {
            return ship.Type[0].ToString(); // First letter of ship type
        }
        return "";
    }

    string DisplayCellContent(int[,] grid, int row, int col)
    {
        return grid[row, col] switch
        {
            2 => "X", // hit
            3 => "O", // miss
            _ => ""
        };
    }
}